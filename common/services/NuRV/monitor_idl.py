# Python stubs generated by omniidl from monitor.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "Monitor"
#
__name__ = "Monitor"
_0_Monitor = omniORB.openModule("Monitor", r"monitor.idl")
_0_Monitor__POA = omniORB.openModule("Monitor__POA", r"monitor.idl")


# enum Verdict
_0_Monitor.RV_True = omniORB.EnumItem("RV_True", 0)
_0_Monitor.RV_False = omniORB.EnumItem("RV_False", 1)
_0_Monitor.RV_Unknown = omniORB.EnumItem("RV_Unknown", 2)
_0_Monitor.RV_Error = omniORB.EnumItem("RV_Error", 3)
_0_Monitor.Verdict = omniORB.Enum("IDL:eu.fbk/Monitor/Verdict:1.0", (_0_Monitor.RV_True, _0_Monitor.RV_False, _0_Monitor.RV_Unknown, _0_Monitor.RV_Error,))

_0_Monitor._d_Verdict  = (omniORB.tcInternal.tv_enum, _0_Monitor.Verdict._NP_RepositoryId, "Verdict", _0_Monitor.Verdict._items)
_0_Monitor._tc_Verdict = omniORB.tcInternal.createTypeCode(_0_Monitor._d_Verdict)
omniORB.registerType(_0_Monitor.Verdict._NP_RepositoryId, _0_Monitor._d_Verdict, _0_Monitor._tc_Verdict)

# interface MonitorService
_0_Monitor._d_MonitorService = (omniORB.tcInternal.tv_objref, "IDL:eu.fbk/Monitor/MonitorService:1.0", "MonitorService")
omniORB.typeMapping["IDL:eu.fbk/Monitor/MonitorService:1.0"] = _0_Monitor._d_MonitorService
_0_Monitor.MonitorService = omniORB.newEmptyClass()
class MonitorService :
    _NP_RepositoryId = _0_Monitor._d_MonitorService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Monitor.MonitorService = MonitorService
_0_Monitor._tc_MonitorService = omniORB.tcInternal.createTypeCode(_0_Monitor._d_MonitorService)
omniORB.registerType(MonitorService._NP_RepositoryId, _0_Monitor._d_MonitorService, _0_Monitor._tc_MonitorService)

# MonitorService operations and attributes
MonitorService._d_heartbeat = ((omniORB.tcInternal.tv_any, (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:eu.fbk/Monitor/Verdict:1.0"], ), None)
MonitorService._d_reset = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_boolean), None, None)

# MonitorService object reference
class _objref_MonitorService (CORBA.Object):
    _NP_RepositoryId = MonitorService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def heartbeat(self, *args):
        return self._obj.invoke("heartbeat", _0_Monitor.MonitorService._d_heartbeat, args)

    def reset(self, *args):
        return self._obj.invoke("reset", _0_Monitor.MonitorService._d_reset, args)

omniORB.registerObjref(MonitorService._NP_RepositoryId, _objref_MonitorService)
_0_Monitor._objref_MonitorService = _objref_MonitorService
del MonitorService, _objref_MonitorService

# MonitorService skeleton
__name__ = "Monitor__POA"
class MonitorService (PortableServer.Servant):
    _NP_RepositoryId = _0_Monitor.MonitorService._NP_RepositoryId


    _omni_op_d = {"heartbeat": _0_Monitor.MonitorService._d_heartbeat, "reset": _0_Monitor.MonitorService._d_reset}

MonitorService._omni_skeleton = MonitorService
_0_Monitor__POA.MonitorService = MonitorService
omniORB.registerSkeleton(MonitorService._NP_RepositoryId, MonitorService)
del MonitorService
__name__ = "Monitor"

#
# End of module "Monitor"
#
__name__ = "monitor_idl"

_exported_modules = ( "Monitor", )

# The end.
