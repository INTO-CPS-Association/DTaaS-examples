
[agent]
	interval = "1s"
	flush_interval = "1s"

[[inputs.amqp_consumer]]
	brokers = ["amqp://<AMQP_HOST>:<AMQP_PORT>/<AMQP_VHOST>"]
	username = "<AMQP_USER>"
	password = "<AMQP_PASS>"
	exchange = "<AMQP_EXCHANGE>"
	exchange_durability = "transient"
	queue = "tessla-lid"
	queue_durability = "transient"
	binding_key = "incubator.diagnosis.plant.lidopen"
	data_format = "json"
	json_string_fields = ["lid_open"]

[[inputs.amqp_consumer]]
	brokers = ["amqp://<AMQP_HOST>:<AMQP_PORT>/<AMQP_VHOST>"]
	username = "<AMQP_USER>"
	password = "<AMQP_PASS>"
	exchange = "<AMQP_EXCHANGE>"
	exchange_durability = "transient"
	queue = "tessla-saver"
	queue_durability = "transient"
	binding_key = "incubator.energysaver.status"
	data_format = "json"
	json_string_fields = ["energy_saver_on"]

[[outputs.amqp]]
	brokers = ["amqp://<AMQP_HOST>:<AMQP_PORT>/<AMQP_VHOST>"]
	username = "<AMQP_USER>"
	password = "<AMQP_PASS>"
	exchange = "<AMQP_EXCHANGE>"
	exchange_durability = "transient"
	routing_key = "incubator.update.closed_loop_controller.parameters"
	data_format = "json"
	namepass = ["alert"]
	use_batch_format = true
	json_transformation = '{"temperature_desired" : metrics[-1].fields.value}'
	
[[outputs.file]]
	files = ["stdout", "/tmp/telegraf.log"]

[[outputs.influxdb]]
  urls = ["udp://127.0.0.1:1653"]

[[inputs.socket_listener]]
  service_address = "udp://:1654"
  data_format = "influx"
