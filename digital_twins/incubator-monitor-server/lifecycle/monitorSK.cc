// This file is generated by omniidl (C++ backend) - omniORB_4_3. Do not edit.

#include "monitor.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

OMNI_MAYBE_UNUSED static const char* _0RL_library_version = omniORB_4_3;



Monitor::MonitorService_ptr Monitor::MonitorService_Helper::_nil() {
  return ::Monitor::MonitorService::_nil();
}

::CORBA::Boolean Monitor::MonitorService_Helper::is_nil(::Monitor::MonitorService_ptr p) {
  return ::CORBA::is_nil(p);

}

void Monitor::MonitorService_Helper::release(::Monitor::MonitorService_ptr p) {
  ::CORBA::release(p);
}

void Monitor::MonitorService_Helper::marshalObjRef(::Monitor::MonitorService_ptr obj, cdrStream& s) {
  ::Monitor::MonitorService::_marshalObjRef(obj, s);
}

Monitor::MonitorService_ptr Monitor::MonitorService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Monitor::MonitorService::_unmarshalObjRef(s);
}

void Monitor::MonitorService_Helper::duplicate(::Monitor::MonitorService_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

Monitor::MonitorService_ptr
Monitor::MonitorService::_duplicate(::Monitor::MonitorService_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

Monitor::MonitorService_ptr
Monitor::MonitorService::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Monitor::MonitorService_ptr
Monitor::MonitorService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Monitor::MonitorService_ptr
Monitor::MonitorService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_MonitorService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_MonitorService* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_MonitorService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Monitor::MonitorService::_PD_repoId = "IDL:eu.fbk/Monitor/MonitorService:1.0";


Monitor::_objref_MonitorService::~_objref_MonitorService() {
  
}


Monitor::_objref_MonitorService::_objref_MonitorService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Monitor::MonitorService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Monitor::_objref_MonitorService::_ptrToObjRef(const char* id)
{
  if (id == ::Monitor::MonitorService::_PD_repoId)
    return (::Monitor::MonitorService_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::Monitor::MonitorService::_PD_repoId))
    return (::Monitor::MonitorService_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for Monitor::MonitorService::heartbeat

// Proxy call descriptor class. Mangled signature:
//  _cMonitor_mVerdict_i_cany_i_cstring
class _0RL_cd_c7988d6100c2d846_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c7988d6100c2d846_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Any_var arg_0_;
  const ::CORBA::Any* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  Monitor::Verdict result;
};

void _0RL_cd_c7988d6100c2d846_00000000::marshalArguments(cdrStream& _n)
{
  (const ::CORBA::Any&) *arg_0 >>= _n;
  _n.marshalString(arg_1,0);

}

void _0RL_cd_c7988d6100c2d846_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ::CORBA::Any;
  (::CORBA::Any&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_c7988d6100c2d846_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_c7988d6100c2d846_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (Monitor::Verdict&)result <<= _n;

}

const char* const _0RL_cd_c7988d6100c2d846_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c7988d6100c2d846_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c7988d6100c2d846_00000000* tcd = (_0RL_cd_c7988d6100c2d846_00000000*)cd;
  Monitor::_impl_MonitorService* impl = (Monitor::_impl_MonitorService*) svnt->_ptrToInterface(Monitor::MonitorService::_PD_repoId);
  tcd->result = impl->heartbeat(*tcd->arg_0, tcd->arg_1);


}

Monitor::Verdict Monitor::_objref_MonitorService::heartbeat(const ::CORBA::Any& index, const char* state)
{
  _0RL_cd_c7988d6100c2d846_00000000 _call_desc(_0RL_lcfn_c7988d6100c2d846_10000000, "heartbeat", 10);
  _call_desc.arg_0 = &(::CORBA::Any&) index;
  _call_desc.arg_1 = state;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for Monitor::MonitorService::reset

// Proxy call descriptor class. Mangled signature:
//  _wvoid_i_cany_i_cboolean
class _0RL_cd_c7988d6100c2d846_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c7988d6100c2d846_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 1, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Any_var arg_0_;
  const ::CORBA::Any* arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_c7988d6100c2d846_20000000::marshalArguments(cdrStream& _n)
{
  (const ::CORBA::Any&) *arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_c7988d6100c2d846_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ::CORBA::Any;
  (::CORBA::Any&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_c7988d6100c2d846_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c7988d6100c2d846_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c7988d6100c2d846_20000000* tcd = (_0RL_cd_c7988d6100c2d846_20000000*)cd;
  Monitor::_impl_MonitorService* impl = (Monitor::_impl_MonitorService*) svnt->_ptrToInterface(Monitor::MonitorService::_PD_repoId);
  impl->reset(*tcd->arg_0, tcd->arg_1);


}

void Monitor::_objref_MonitorService::reset(const ::CORBA::Any& index, ::CORBA::Boolean hard_p)
{
  _0RL_cd_c7988d6100c2d846_20000000 _call_desc(_0RL_lcfn_c7988d6100c2d846_30000000, "reset", 6);
  _call_desc.arg_0 = &(::CORBA::Any&) index;
  _call_desc.arg_1 = hard_p;

  _invoke(_call_desc);



}

Monitor::_pof_MonitorService::~_pof_MonitorService() {}


omniObjRef*
Monitor::_pof_MonitorService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Monitor::_objref_MonitorService(ior, id);
}


::CORBA::Boolean
Monitor::_pof_MonitorService::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::Monitor::MonitorService::_PD_repoId))
    return 1;
  
  return 0;
}

const Monitor::_pof_MonitorService _the_pof_Monitor_mMonitorService;

Monitor::_impl_MonitorService::~_impl_MonitorService() {}


::CORBA::Boolean
Monitor::_impl_MonitorService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "heartbeat")) {

    _0RL_cd_c7988d6100c2d846_00000000 _call_desc(_0RL_lcfn_c7988d6100c2d846_10000000, "heartbeat", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "reset")) {

    _0RL_cd_c7988d6100c2d846_20000000 _call_desc(_0RL_lcfn_c7988d6100c2d846_30000000, "reset", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Monitor::_impl_MonitorService::_ptrToInterface(const char* id)
{
  if (id == ::Monitor::MonitorService::_PD_repoId)
    return (::Monitor::_impl_MonitorService*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::Monitor::MonitorService::_PD_repoId))
    return (::Monitor::_impl_MonitorService*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
Monitor::_impl_MonitorService::_mostDerivedRepoId()
{
  return ::Monitor::MonitorService::_PD_repoId;
}

POA_Monitor::MonitorService::~MonitorService() {}

