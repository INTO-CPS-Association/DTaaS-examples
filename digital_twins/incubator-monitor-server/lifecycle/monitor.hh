// This file is generated by omniidl (C++ backend)- omniORB_4_3. Do not edit.
#ifndef __monitor_hh__
#define __monitor_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_monitor
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_monitor
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_monitor
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE Monitor

_CORBA_MODULE_BEG

  enum Verdict { RV_True, RV_False, RV_Unknown, RV_Error /*, __max_Verdict=0xffffffff */ };
  typedef Verdict& Verdict_out;

#ifndef __Monitor_mMonitorService__
#define __Monitor_mMonitorService__
  class MonitorService;
  class _objref_MonitorService;
  class _impl_MonitorService;
  
  typedef _objref_MonitorService* MonitorService_ptr;
  typedef MonitorService_ptr MonitorServiceRef;

  class MonitorService_Helper {
  public:
    typedef MonitorService_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_MonitorService, MonitorService_Helper> MonitorService_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_MonitorService,MonitorService_Helper > MonitorService_out;

#endif

  // interface MonitorService
  class MonitorService {
  public:
    // Declarations for this interface type.
    typedef MonitorService_ptr _ptr_type;
    typedef MonitorService_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_MonitorService :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    Verdict heartbeat(const ::CORBA::Any& index, const char* state);
    void reset(const ::CORBA::Any& index, ::CORBA::Boolean hard_p);

    // Constructors
    inline _objref_MonitorService()  { _PR_setobj(0); }  // nil
    _objref_MonitorService(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_MonitorService();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_MonitorService(const _objref_MonitorService&);
    _objref_MonitorService& operator = (const _objref_MonitorService&);
    // not implemented

    friend class MonitorService;
  };

  class _pof_MonitorService : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_MonitorService() : _OMNI_NS(proxyObjectFactory)(MonitorService::_PD_repoId) {}
    virtual ~_pof_MonitorService();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_MonitorService :
    public virtual omniServant
  {
  public:
    virtual ~_impl_MonitorService();

    virtual Verdict heartbeat(const ::CORBA::Any& index, const char* state) = 0;
    virtual void reset(const ::CORBA::Any& index, ::CORBA::Boolean hard_p) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_Monitor
_CORBA_MODULE_BEG

  class MonitorService :
    public virtual Monitor::_impl_MonitorService,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~MonitorService();

    inline ::Monitor::MonitorService_ptr _this() {
      return (::Monitor::MonitorService_ptr) _do_this(::Monitor::MonitorService::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Monitor
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(Monitor::Verdict _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Monitor::Verdict& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Monitor::RV_Error) {
    _e = (Monitor::Verdict) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
Monitor::MonitorService::_marshalObjRef(::Monitor::MonitorService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_monitor
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_monitor
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_monitor
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_monitor
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_monitor
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_monitor
#endif

#endif  // __monitor_hh__

