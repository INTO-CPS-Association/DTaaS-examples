#!/bin/bash

source ~/drobotti-processing-and-control/install/setup.bash

export MAESTRO_PATH=/workspace/examples/common/tools
export DEFAULT_PATH=/workspace/examples/digital_twins/drobotti_movement_simulation
export FSP=/workspace/examples/models/drobotti_movement_simulation
export PYTHONPATH=$PYTHONPATH:/opt/conda/lib/python3.8/site-packages

printf "\n\nStarting ROS to RMQ bridge.\n" && sleep 2
mkdir -p $DEFAULT_PATH/logs
ros2 run rmq_bridge rmq_publisher --ros-args -r __node:=rmq_publisher --params-file $DEFAULT_PATH/ros2_parameters.yaml 2>&1 | tee $DEFAULT_PATH/logs/publisher-log.txt > /dev/null &

printf "\n\nGenerating simulation spec file\n" && sleep 2
cd $DEFAULT_PATH
java -jar $MAESTRO_PATH/maestro-2.3.0-jar-with-dependencies.jar import sg1 ./coe.json ./multimodel.json -fsp $FSP -output ./generate 2>&1 | tee $DEFAULT_PATH/logs/generate-spec-log.txt > /dev/null & 

printf "\n\nInterpreting simulation spec file and launching simulation.\n" && sleep 2
java -jar $MAESTRO_PATH/maestro-2.3.0-jar-with-dependencies.jar interpret ./generate/spec.mabl -output ./target 2>&1 | tee $DEFAULT_PATH/logs/simulation-log.txt > /dev/null & 

printf "\n\nLaunching steering controller. The simulation will run for 30 seconds.\n" && sleep 5
ros2 run teleop terminal_teleop --ros-args -r __node:=teleop --params-file $DEFAULT_PATH/ros2_parameters.yaml

# printf "\n\nSimulation finished.\n"
# /bin/bash $DEFAULT_PATH/lifecycle/terminate